PYTHON_VERSION='3.8'

SSL_LIBRARY="openssl"
PYTHON_WHEELS="paramiko-${SSL_LIBRARY} python-hosts"

declare -A BUILD_ARGS=( \
	[PYTHON_VERSION]='Python version' \
	[DEBIAN_RELEASE]='Debian release' \
	[SSL_LIBRARY]='SSL library' \
	[IMPORTS_DIR]='Imports dir' \
)

declare -A CHECKOUT_DISPLAY=( \
	[PYTHON_VERSION]='Python version' \
	[DOCKER_FILE]='Dockerfile' \
	[SSL_LIBRARY]='SSL library' \
)

env_end () {
	case "${DOCKER_TAG}" in
		*debian*|*buster*)
			TARGET_TAG='debian'
			SOURCE_REPO='moonbuggy2000/debian-slim-s6-python'
			DOCKER_FILE='Dockerfile.debian'
			ARCH_YAML='hooks/arch.debian.yaml'
			;;&
		debian-binary*|buster-binary*)
			TARGET_TAG='debian-binary'
			DOCKER_FILE='Dockerfile.binary'
			;;
		*alpine*|binary|latest)
			TARGET_TAG='alpine'
			SOURCE_REPO='moonbuggy2000/alpine-s6-python'
			unset DEBIAN_RELEASE
			unset ALPINE_VERSION
			ARCH_YAML='hooks/arch.alpine.yaml'
			;;&
		alpine-binary*|binary|latest)
			TARGET_TAG='alpine-binary'
			SOURCE_REPO='moonbuggy2000/alpine-s6'
			ALPINE_VERSION="3.12"
			DOCKER_FILE='Dockerfile.binary'
			;;
	esac

	[ -z "${SOURCE_REPO+set}" ] \
		&& echo "Can't build tag '${DOCKER_TAG}'." \
		&& exit 1
}

post_checkout_start () {
	[ -n "${ALPINE_VERSION+set}" ] \
		&& SOURCE_TAG="${ALPINE_VERSION}" \
		|| SOURCE_TAG="${PYTHON_VERSION}"

	add_param "${SOURCE_TAG}" 'SOURCE_TAG'
}

## extra tags to add during post_push
get_manifest_tags () {
	local extra_tags && extra_tags=()

	case "${TARGET_TAG}" in
		alpine) extra_tags+=('script') ;;
		alpine-binary) extra_tags+=('binary' 'latest') ;;
	esac

	echo "${extra_tags[@]}"
}
