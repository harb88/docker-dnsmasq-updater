ARCH_KEYS="TARGET_ARCH_TAG EXTRA_ARCH_TAGS QEMU_ARCH QEMU_PREFIX DOCKER_FILE"

CACHE_EXPIRY=86400

PYTHON_VERSION='3.8'
DEBIAN_RELEASE="buster"

declare -A BUILD_ARGS=( \
	[ALPINE_VERSION]='Alpine version' \
	[PYTHON_VERSION]='Python version' \
	[QEMU_PREFIX]='QEMU prefix' \
	[TARGET_ARCH_TAG]='Target arch tag' \
	[TARGET_OS]='Target OS' \
	[DEBIAN_RELEASE]='Debian release'
)

declare -A CHECKOUT_DISPLAY=( \
	[ALPINE_VERSION]='Alpine version' \
	[PYTHON_VERSION]='Python version' \
	[DOCKERFILE_OVERRIDE]='Dockerfile' \
	[BUILD_ARCH]='Build arch' \
	[TARGET_OS]='Target OS' \
	[DEBIAN_RELEASE]='Debian release'
)

case "${DOCKER_TAG}" in
	*debian*|*buster*)
		TARGET_TAG='debian'
		TARGET_OS='debian'
		SOURCE_REPO='moonbuggy2000/debian-slim-s6-python'
		DOCKERFILE_OVERRIDE='docker/Dockerfile.debian'
		unset ALPINE_VERSION
		PYTHON_VERSION='3.7'
		ARCH_YAML='hooks/arch.debian.yaml'
		;;&
	debian-binary*|buster-binary*)
		TARGET_TAG='debian-binary'
		DOCKERFILE_OVERRIDE='docker/Dockerfile.binary'
		;;
	*alpine*|binary|latest)
		TARGET_TAG='alpine'
		TARGET_OS='alpine'
		SOURCE_REPO='moonbuggy2000/alpine-s6'
		DOCKERFILE_OVERRIDE='docker/Dockerfile'
		unset DEBIAN_RELEASE
		ALPINE_VERSION='3.13'
		PYTHON_VERSION='3.8'
		ARCH_YAML='hooks/arch.alpine.yaml'
		;;&
	alpine-binary*|binary|latest)
		TARGET_TAG='alpine-binary'
		DOCKERFILE_OVERRIDE='docker/Dockerfile.binary'
		;;
esac

[ -z "${SOURCE_REPO+set}" ] \
		&& echo "Can't build tag '${DOCKER_TAG}'." \
		&& exit 1

env_end () { [ -n "${BUILD_ARCH}" ] && add_param "${DOCKER_TAG##*-}" 'BUILD_ARCH'; }

## get the source tag
get_source_tag () {
	[ -n "${ALPINE_VERSION+set}" ] \
		&& echo "${ALPINE_VERSION}" \
		|| echo "${PYTHON_VERSION}"
}

## extra tags to add during post_push
get_manifest_tags () {
	local extra_tags && extra_tags=()

	case "${TARGET_TAG}" in
		alpine) extra_tags+=('script') ;;
		alpine-binary) extra_tags+=('binary' 'latest') ;;
	esac

	echo "${extra_tags[@]}"
}
