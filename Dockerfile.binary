ARG ALPINE_VERSION="3.14"
ARG FROM_IMAGE="moonbuggy2000/alpine-s6:${ALPINE_VERSION}"

ARG BUILD_PYTHON_VERSION="3.8"
ARG TARGET_OS="alpine"
ARG TARGET_ARCH_TAG="amd64"

ARG BUILDER_ROOT="/builder_root"

## build the binary and prepare files
#
FROM "moonbuggy2000/nuitka:py${BUILD_PYTHON_VERSION}-${TARGET_OS}-${TARGET_ARCH_TAG}" AS builder

# QEMU static binaries from pre_build
ARG QEMU_DIR=""
ARG QEMU_ARCH=""
COPY _dummyfile "${QEMU_DIR}/qemu-${QEMU_ARCH}-static*" /usr/bin/

ARG APP_PATH="/app"
WORKDIR "${APP_PATH}"

COPY ./requirements.txt ./

# Python wheels from pre_build
ARG IMPORTS_DIR=".imports"
ARG TARGET_ARCH_TAG
COPY _dummyfile "${IMPORTS_DIR}/${TARGET_ARCH_TAG}*" "/${IMPORTS_DIR}/"

# install requirements
# attempt to use pre-built binary wheels (from moonbuggy2000/python-musl-wheels)
# but revert to building from source if it fails
ARG RUST_REQUIRED="1.41.1"
ENV LIBSODIUM_MAKE_ARGS="-j4"
RUN RUST_VERSION="$(rustc --version | cut -d' ' -f2)" \
	&& if [ "$(printf '%s\n' "${RUST_REQUIRED}" "${RUST_VERSION}" | sort -V | head -n1)" != "${RUST_REQUIRED}" ]; then \
			echo "*** CRYPTOGRAPHY_DONT_BUILD_RUST ***"; export "CRYPTOGRAPHY_DONT_BUILD_RUST=1"; fi \
	&& python3 -m pip install ${PIP_ARGS} --upgrade pip \
	&& python3 -m pip install --only-binary=:all: --find-links "/${IMPORTS_DIR}/"  -r requirements.txt \
		|| python3 -m pip install --find-links "/${IMPORTS_DIR}/" -r requirements.txt

COPY ./dnsmasq_updater.py ./
COPY ./dnsmasq_updater-nuitka-hints.json ./

# hinted compilation with Nuitka
ARG BUILD_PYTHON_VERSION
RUN svn checkout https://github.com/Nuitka/NUITKA-Utilities/trunk/hinted-compilation . \
	# patch hinted-mods.py \
	&& sed -e 's|recurse_modules|follow_modules|' -i hinted-mods.py \
	&& PYTHON_MINOR="$(echo "${BUILD_PYTHON_VERSION}" | grep -oE '^[0-9]+\.[0-9]+')" \
	&& ln -s ./dnsmasq_updater-nuitka-hints.json "./dnsmasq_updater-${PYTHON_MINOR//.}-linux-64.json" \
	&& ln -s ./dnsmasq_updater-nuitka-hints.json "./dnsmasq_updater-${PYTHON_MINOR//.}-linux-32.json"

RUN python3 nuitka-hints.py --output-dir="${BUILDER_ROOT}${APP_PATH}" dnsmasq_updater.py

RUN mkdir ./dnsmasq_updater.dist/keys \
	&& mkdir ./dnsmasq_updater.dist/conf

# organize files
ARG BUILDER_ROOT
RUN mkdir -p "${BUILDER_ROOT}" \
	&& mv dnsmasq_updater.dist "${BUILDER_ROOT}${APP_PATH}"

WORKDIR "${BUILDER_ROOT}"

COPY ./dnsmasq_updater.conf ".${APP_PATH}/conf/"
COPY ./root/ ./

RUN echo "APP_PATH=${APP_PATH}" >> "${BUILDER_ROOT}/etc/contenv_extra"

## build the final image
#
FROM "${FROM_IMAGE}"

ARG BUILDER_ROOT
COPY --from=builder "${BUILDER_ROOT}/" /

HEALTHCHECK --start-period=10s --timeout=10s CMD /healthcheck.sh
